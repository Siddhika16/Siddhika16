import java.io.*;
import java.util.*;

class Student {
    String stdId;
    String name;
    String rollNo;
    String stdClass;
    double marks;
    String address;

    public Student(String stdId, String name, String rollNo, String stdClass, double marks, String address) {
        this.stdId = stdId;
        this.name = name;
        this.rollNo = rollNo;
        this.stdClass = stdClass;
        this.marks = marks;
        this.address = address;
    }

    public String toString() {
        return stdId + "," + name + "," + rollNo + "," + stdClass + "," + marks + "," + address;
    }

    public static Student fromString(String data) {
        String[] fields = data.split(",");
        return new Student(fields[0], fields[1], fields[2], fields[3], Double.parseDouble(fields[4]), fields[5]);
    }
}

public class StudentRecord {

    private static void createDatabase(Scanner scr) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("StudentRecord.txt", true))) {
            System.out.print("Enter Student ID: ");
            String stdId = scr.nextLine();
            System.out.print("Enter Name: ");
            String name = scr.nextLine();
            System.out.print("Enter Roll No: ");
            String rollNo = scr.nextLine();
            System.out.print("Enter Class: ");
            String stdClass = scr.nextLine();
            System.out.print("Enter Marks: ");
            double marks = scr.nextDouble();
            scr.nextLine(); // Consume newline
            System.out.print("Enter Address: ");
            String address = scr.nextLine();

            Student student = new Student(stdId, name, rollNo, stdClass, marks, address);
            writer.write(student.toString());
            writer.newLine();
            System.out.println("Student record added successfully.");
        } catch (IOException e) {
            System.out.println("Error while creating database: " + e.getMessage());
        }
    }

    private static void displayDatabase() {
        try (BufferedReader reader = new BufferedReader(new FileReader("StudentRecord.txt"))) {
            String line;
            System.out.println("Student Records:");
            while ((line = reader.readLine()) != null) {
                System.out.println(Student.fromString(line));
            }
        } catch (IOException e) {
            System.out.println("Error while displaying database: " + e.getMessage());
        }
    }

    private static void deleteRecord(Scanner scr) {
        System.out.print("Enter Student ID to delete: ");
        String stdId = scr.nextLine();
        File inputFile = new File("StudentRecord.txt");
        File tempFile = new File("temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
             
            String line;
            boolean found = false;
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromString(line);
                if (!student.stdId.equals(stdId)) {
                    writer.write(line);
                    writer.newLine();
                } else {
                    found = true;
                }
            }

            if (found) {
                System.out.println("Record deleted successfully.");
            } else {
                System.out.println("Record not found.");
            }
        } catch (IOException e) {
            System.out.println("Error while deleting record: " + e.getMessage());
        }

        // Rename temp file to original file
        if (!inputFile.delete()) {
            System.out.println("Could not delete the original file.");
        }
        if (!tempFile.renameTo(inputFile)) {
            System.out.println("Could not rename temp file to original file.");
        }
    }

    private static void updateRecord(Scanner scr) {
        System.out.print("Enter Student ID to update: ");
        String stdId = scr.nextLine();
        File inputFile = new File("StudentRecord.txt");
        File tempFile = new File("temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
             
            String line;
            boolean found = false;
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromString(line);
                if (student.stdId.equals(stdId)) {
                    found = true;
                    System.out.print("Enter new Name (leave empty to keep unchanged): ");
                    String name = scr.nextLine();
                    System.out.print("Enter new Roll No (leave empty to keep unchanged): ");
                    String rollNo = scr.nextLine();
                    System.out.print("Enter new Class (leave empty to keep unchanged): ");
                    String stdClass = scr.nextLine();
                    System.out.print("Enter new Marks (leave empty to keep unchanged): ");
                    String marksStr = scr.nextLine();
                    System.out.print("Enter new Address (leave empty to keep unchanged): ");
                    String address = scr.nextLine();

                    // Update fields
                    if (!name.isEmpty()) student.name = name;
                    if (!rollNo.isEmpty()) student.rollNo = rollNo;
                    if (!stdClass.isEmpty()) student.stdClass = stdClass;
                    if (!marksStr.isEmpty()) student.marks = Double.parseDouble(marksStr);
                    if (!address.isEmpty()) student.address = address;
                }
                writer.write(student.toString());
                writer.newLine();
            }

            if (found) {
                System.out.println("Record updated successfully.");
            } else {
                System.out.println("Record not found.");
            }
        } catch (IOException e) {
            System.out.println("Error while updating record: " + e.getMessage());
        }

        // Rename temp file to original file
        if (!inputFile.delete()) {
            System.out.println("Could not delete the original file.");
        }
        if (!tempFile.renameTo(inputFile)) {
            System.out.println("Could not rename temp file to original file.");
        }
    }

    private static void searchRecord(Scanner scr) {
        System.out.print("Enter Student ID to search: ");
        String stdId = scr.nextLine();

        try (BufferedReader reader = new BufferedReader(new FileReader("StudentRecord.txt"))) {
            String line;
            boolean found = false;

            while ((line = reader.readLine()) != null) {
                Student student = Student.fromString(line);
                if (student.stdId.equals(stdId)) {
                    System.out.println("Record found: " + student);
                    found = true;
                    break;
                }
            }

            if (!found) {
                System.out.println("Record not found.");
            }
        } catch (IOException e) {
            System.out.println("Error while searching record: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Scanner scr = new Scanner(System.in);
        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Create Database");
            System.out.println("2. Display Database");
            System.out.println("3. Delete Record");
            System.out.println("4. Update Record");
            System.out.println("5. Search Record");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int choice = scr.nextInt();
            scr.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    createDatabase(scr);
                    break;
                case 2:
                    displayDatabase();
                    break;
                case 3:
                    deleteRecord(scr);
                    break;
                case 4:
                    updateRecord(scr);
                    break;
                case 5:
                    searchRecord(scr);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

